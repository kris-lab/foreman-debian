require 'thread'
require 'thwait'

module ForemanDebian
  module EngineHelper

    def setup
      @exported = []
      @output = ForemanDebian::logger
    end

    def pidfile(name)
      name = "#{@app}-#{name}"
      Pathname.new('/var/run').join(name).join(name + '.pid')
    end

    def cleanup
      threads = []
      each_file do |path|
        next if @exported.include? path
        threads << Thread.new { remove_file path }
      end
      ThreadsWait.all_waits(*threads)
    end

    def export_file(path)
      @exported.push(path)
      @output.info " create  #{path.to_s} "
    end

    def remove_file(path)
      File.unlink path
      @output.info " remove  #{path.to_s}"
    end

    def each_file(&block)
      Dir.glob @export_path.join("#{@app}-*") do |path|
        path = Pathname.new(path)
        next unless path.read.match(/# Autogenerated by foreman/)
        block.call(path)
      end
    end

    def exec_command(command)
      Open3.popen3(command) do |i, o, e, w|
        i.close
        out, err, wait = o.read, e.read, w
        status = wait ? wait.value : $?
        raise "Command `#{command}` failed: #{err}" unless status.success?
        out
      end
    end
  end
end
